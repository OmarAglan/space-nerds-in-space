#!/bin/sh

if [ "$(id -u)" = "0" ]
then
	echo "You are root. Do not run this script as root." 1>&2
	exit 1
fi

# Hack this in for now
PREFIX=.

BINDIR=${PREFIX}/bin
if [ "$SNIS_ASSET_DIR" = "" ]
then
	export SNIS_ASSET_DIR=${PREFIX}/share/snis
fi
SNIS_SERVER=${BINDIR}/snis_server
SNIS_CLIENT=${BINDIR}/snis_client
SNIS_MULTIVERSE=${BINDIR}/snis_multiverse
SSGL_SERVER=${BINDIR}/ssgl_server
ASPECT_RATIO="${ASPECT_RATIO:-}"
LOBBYHOST=localhost
# ASPECT_RATIO="5:4"
# ASPECT_RATIO="4:3"
# ASPECT_RATIO="16:10"
# ASPECT_RATIO="16:9"
TRAP_NANS=
# TRAP_NANS=--trap-nans
SPLASH_SCREEN="ENABLED"

ENABLE_ENSCRIPT=
# ENABLE_ENSCRIPT=--enable-enscript

if [ "$ASPECT_RATIO" != "" ]
then
	ASPECT_RATIO_ARG="--aspect-ratio $ASPECT_RATIO"
else
	ASPECT_RATIO_ARG=""
fi

SOLARSYSTEM_NAME="default"

remove_snis_lock_dirs()
{
	for x in /tmp/snis_multiverse_lock /tmp/snis_server_lock.*
	do
		if [ -d "$x" ]
		then
			rmdir "$x"
		fi
	done
}

print_main_menu()
{
cat << EOF 1>&2

   1. Launch SNIS lobby server
	The lobby server allows clients to find servers
	There should be one lobby server total.
   2. Launch SNIS multiverse server
	The multiverse server stores player ship data
	There should be one multiverse server total
   3. Launch SNIS server
	There should be one snis server per solarsystem.
	There should be at least one instance of snis_server.
   4. Launch SNIS client process
	There should be one snis client process per player
	plus one more per ship for the main screen.
   5. Stop all SNIS processes
   6. Stop all SNIS clients
   7. Stop all SNIS servers
   8. Check for asset updates
   9. Options
   0. Quit
EOF
}

show_current_ssgl_port()
{
	if [ "$SSGL_PORT" = "" ]
	then
		echo -n "currently not set, will default to gamelobby/2914"
		unset SSGL_PORT
	else
		echo -n "currently $SSGL_PORT"
	fi
}

show_current_snis_port_range()
{
	if [ "$SNIS_SERVER_PORT_RANGE" = "" ]
	then
		echo -n "currently not set, will default to IANA dynamic port range"
		unset SNIS_SERVER_PORT_RANGE
	else
		echo -n "currently $SNIS_SERVER_PORT_RANGE"
	fi
}

print_options_menu()
{
cat << EOF 1>&2
    1. Enter Lobby Host IP addr (currently $LOBBYHOST)
    2. Enter Lobby Host Port number ($(show_current_ssgl_port))
    3. Enter SNIS server port range MIN:MAX ($(show_current_snis_port_range))
    4. Enable/Disable splash screen (currently $SPLASH_SCREEN)
    0. Return to main menu
EOF
}

kill_processes()
{
	pattern="$1"
	p=$(ps aux | egrep "$pattern" | grep -v 'grep')
	if [ "$p" = "" ]
	then
		echo "There are no processes to kill."
		return
	else
		echo "$p"
	fi
	ps aux | egrep "$pattern" | grep -v 'grep' | awk '{ printf("kill %s\n", $2); }' | /bin/sh
	echo "Killed the above processes."
}

check_for_binary()
{
	binary="$1"
	if [ ! -x "$binary" ]
	then
		echo 1>&2
		echo 1>&2
		echo "snis_launcher: Failed to find binary executable $1, aborting." 1>&2
		echo "snis_launcher: You may need to run \"make\"" 1>&2
		echo 1>&2
		echo 1>&2
		sleep 1
		return 1
	fi
	return 0
}

start_snis_lobby()
{
	check_for_binary "${SSGL_SERVER}"
	if [ "$?" != "0" ]
	then
		return
	fi
	if [ "${LOBBYHOST}" != "localhost" ]
	then
		echo
		echo "WARNING: current lobby host is ${LOBBYHOST}, not localhost."
		echo "Are you sure you mean to start a local lobby server (y/n)?"
		read x
		if [ "$x" != "y" ]
		then
			echo "Not starting lobby host."
			return
		else
			echo "Starting local lobby host anyway."
		fi
	fi
	echo
	echo "Starting the lobby server"
	echo
	${SSGL_SERVER} > snis_lobby_log.txt 2>&1
	sleep 0.25
}

start_snis_multiverse()
{
	local autowrangle=
	local exempt=

	check_for_binary "${SNIS_MULTIVERSE}"
	if [ "$?" != "0" ]
	then
		return
	fi
	printf "Autowrangle snis_servers (y/n, default = y)?"
	read x
	if [ "$x" != "n" ]
	then
		echo
		echo "Which solarsystem should be exempted from auto-wrangling?"
		get_solarsystem_name
		exempt="-e $SOLARSYSTEM_NAME"
		autowrangle=-a
		echo "Exempting solarsystem $SOLARSYSTEM_NAME from auto-wrangling."
	else
		autowrangle=
		exempt=
	fi

	if [ ! -d ./snisdb ]
	then
		echo "./snisdb/ does not exist, creating directory." 1>&2
		mkdir ./snisdb
		if [ "$?" != "0" ]
		then
			echo "mkdir ./snisdb failed."
		fi
		if [ ! -d ./snisdb ]
		then
			echo "Directory ./snisdb does not exist, snis_multiverse will not run without it, please create it." 1>&2
			echo "Failed to start multiverse server" 1>&2
			return;
		fi
		echo "Created ./snisdb for snis_multiverse" 1>&2
	fi
	(${SNIS_MULTIVERSE} $autowrangle -l "${LOBBYHOST}" -n nickname -L narnia $exempt > snis_multiverse_log.txt 2>&1 ; \
		echo "snis_multiverse died, status was $?" 1>&2 ) &
}

get_solarsystem_name()
{
	while true
	do
		default="$SOLARSYSTEM_NAME"
		dname="."

		echo "Choose a solar system:"
		for ss in ${SNIS_ASSET_DIR}/solarsystems/*/assets.txt
		do
			dname=$(dirname "$ss")
			name=$(basename "$dname")
			echo "   $name"
		done
		printf "Enter the name of the solarsystem (default = %s): " "$default"
		read ssname;
		if [ "$ssname" = "" ]
		then
			ssname="$default"
		fi
		if [ ! -f "${SNIS_ASSET_DIR}/solarsystems/$ssname"/assets.txt ]
		then
			echo "Invalid choice: $ssname"
		else
			break;
		fi
	done
	if [ -d ${SNIS_ASSET_DIR}/solarsystems/"$ssname" -a -f ${SNIS_ASSET_DIR}/solarsystems/"$ssname"/assets.txt ]
	then
		SOLARSYSTEM_NAME="$ssname"
	else
		SOLARSYSTEM_NAME="default"
	fi
}

uppercase()
{
	echo "$1" | tr '[:lower:]' '[:upper:]'
}

start_snis_server()
{
	check_for_binary "${SNIS_SERVER}"
	if [ "$?" != "0" ]
	then
		return
	fi
	echo
	echo "Starting snis_server"
	echo
	get_solarsystem_name
	echo "Using solar system $SOLARSYSTEM_NAME"
	SS1="$SOLARSYSTEM_NAME"
	UPPER_SS1=$(uppercase "$SS1")
	${SNIS_SERVER} -l "${LOBBYHOST}" -L "$UPPER_SS1" -m narnia -s "$SS1" ${ENABLE_ENSCRIPT} ${TRAP_NANS} > snis_server_log.txt 2>&1 &
	sleep 2.5
}

start_snis_client()
{
	check_for_binary "${SNIS_CLIENT}"
	if [ "$?" != "0" ]
	then
		return
	fi
	echo
	echo "Starting snis_client (it may take a few moments to appear)"
	echo
	if [ "$SPLASH_SCREEN" = "DISABLED" ]
	then
		SPLASH_SCREEN_OPTION="--no-splash-screen"
	else
		SPLASH_SCREEN_OPTION=""
	fi
	CLIENT="$1"
	${CLIENT} --lobbyhost "${LOBBYHOST}" $ASPECT_RATIO_ARG --fullscreen \
		${TRAP_NANS} ${SPLASH_SCREEN_OPTION} > snis_client_log.txt 2>&1 &
	sleep 1
	# --starship "$shipname" --pw "$password" $@
}

enter_lobby_host()
{
	printf "Enter lobby host: "
	read x
	export LOBBYHOST="$x"
}

enter_lobby_port()
{
	printf "Enter lobby port: "
	read x
	export SSGL_PORT="$x"
}

enter_snis_server_port_range()
{
	printf "Enter SNIS server port range (min:max): "
	read x
	export SNIS_SERVER_PORT_RANGE="$x"
}

reformat_processes()
{
	awk '
		/ssgl_server/ { printf("%20s -- %s\n", "LOBBY SERVER", $0); next; }
		/snis_client/ { printf("%20s -- %s\n", "SNIS CLIENT", $0); next; }
		/snis_server/ { printf("%20s -- %s\n", "SNIS SERVER", $0); next; }
		/snis_multiverse/ { printf("%20s -- %s\n", "MULTIVERSE SERVER", $0); next; }
		{ printf("%20s -- %s\n", "UNKNOWN", $0); next; }'
}

show_snis_processes()
{
	echo "------------------------------------------------------------"
	p=$(ps aux | egrep 'snis_multiverse|snis_server|snis_client|ssgl_server' | grep -v grep)
	if [ "$p" = "" ]
	then
		echo "No SNIS processes are currently running."
		# Since we know there are no processes, let's clean up any lock files
		# that may be lying around (shouldn't be any, but just in case).
		remove_snis_lock_dirs
	else
		echo "The following SNIS processes are running:"
		echo "$p" | reformat_processes
	fi
	echo "------------------------------------------------------------"
}

check_for_bad_lockfiles()
{
	for x in /tmp/snis_server_lock.*
	do
		if [ ! -d "$x" ]
		then
			continue;
		fi
		instancename=$(echo "$x" | sed -e 's/.*[.]//')
		ps aux | egrep snis_server | grep "[-]L $instancename[ ]" > /dev/null 2>&1
		if [ "$?" = "1" ]
		then
			echo 1>&2
			echo "WARNING: lockdir $x found, but no corresponding snis_server process!" 1>&2
			echo "You may need to execute the following command: rmdir $x" 1>&2
			echo 1>&2
		fi
	done
}

check_for_ip_address()
{
	check_for_binary "${SSGL_SERVER}"
	if [ "$?" != "0" ]
	then
		exit 1
	fi
	ipaddr=$(${SSGL_SERVER} --find-ip-address 2>/dev/null)
	if [ "$ipaddr" = "" -o "$ipaddr" = "0.0.0.0" ]
	then
		echo "Failed to find primary IP address." 1>&2
		echo "You might need to set SSGL_PRIMARY_IP_PROBE_ADDR" 1>&2
		echo "If you are on a LAN with an IP address like 192.168.1.10" 1>&2
		echo "try 'export SSGL_PRIMARY_IP_PROBE_ADDR=192.168.1.10'" 1>&2
		echo "If you are running everything locally on a single machine" 1>&2
		echo "and you want to use the localhost interface try" 1>&2
		echo "'export SSGL_PRIMARY_IP_PROBE_ADDR=127.0.0.1'" 1>&2
		exit 1
	fi
}

spot_check_for_assets()
{
	if [ ! -f "${SNIS_ASSET_DIR}/models/cylinder.stl" ]
	then
		echo "Failed to find ${SNIS_ASSET_DIR}/models/cylinder.stl" 1>&2
		echo "Perhaps you need to run 'make update-assets' or 'make assets'?" 1>&2
		exit 1
	fi
}

choose_options()
{
	while true
	do
		echo
		echo "     Space Nerds In Space Options"
		echo
		show_snis_processes
		print_options_menu
		check_for_bad_lockfiles
		printf "   Choose [0-3]: "
		read x

		case "$x" in
		0)
			return
		;;
		1)
			enter_lobby_host
		;;
		2)
			enter_lobby_port
		;;
		3)
			enter_snis_server_port_range
		;;
		4)
			if [ "$SPLASH_SCREEN" = "ENABLED" ]
			then
				SPLASH_SCREEN="DISABLED"
			else
				SPLASH_SCREEN="ENABLED"
			fi
			echo "Splash screen is now $SPLASH_SCREEN"
		;;
		esac
	done
}

check_for_ip_address
spot_check_for_assets

while true
do
	echo
	echo "     Welcome to Space Nerds In Space"
	echo
	show_snis_processes
	print_main_menu
	check_for_bad_lockfiles
	printf "   Choose [0-10]: "
	read x

	case "$x" in
	0)
	   echo
	   echo "Goodbye! Thanks for playing!"
	   echo
	   exit
		;;
	5) kill_processes 'snis_server|snis_client|snis_multiverse|ssgl_server'
		remove_snis_lock_dirs
		;;
	6) kill_processes 'snis_client'
		;;
	7) kill_processes 'snis_server|snis_multiverse|ssgl_server'
		remove_snis_lock_dirs
		;;
	1) start_snis_lobby
		;;
	2) start_snis_multiverse
		;;
	3) start_snis_server
		;;
	4) start_snis_client "$SNIS_CLIENT"
		;;
	8) util/snis_update_assets.sh --dry-run
		;;
	9) choose_options
		;;
	*) echo "Invalid choice."
	        ;;
	esac
done

exit

